package com.example.tpcodo;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.filter.CorsFilter;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;




@SpringBootApplication
@RestController // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name
      , @RequestParam String email, @RequestParam String surname,@RequestParam String password) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    
    User n = new User();
    n.setName(name);
    n.setEmail(email);
    n.setSurname(surname);
    n.setPassword(password);
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users

    return userRepository.findAll();
  }
  
  private boolean duplicates(String email){
    boolean result;
    try {
      var check = userRepository.findByEmail(email);
      System.out.println(check.iterator().next().getName());
      result=true;
    } catch (Exception e) {
      System.out.println("No Hallado");
      result=false;
    }      
      
    
    return result;
    

  }
  @PostMapping(path="/hasduplicated")
  public boolean hasduplicated(@RequestParam String email){
  return    duplicates(email);
  } 



   
  private boolean succeslogin(String email,String Password){
    boolean result;
    try {
      var check = userRepository.findByEmail(email);
      String DBPassword=check.iterator().next().getPassword();
      System.out.println(Password);


      if(DBPassword.equals(Password)){
          System.out.println("Loggin Exitoso");
          result=true;
        }
      else{
        System.out.println("Las contrase√±as no coinciden");
        result=false;

      }

    } catch (Exception e) {
      System.out.println("No Hallado");
      result=false;
    }      
      
    
    return result;
    

  }
  @PostMapping(path="/logcheck")
  public boolean logcheck(@RequestParam String email,@RequestParam String password){
    return succeslogin(email,password);
  } 

  @PostMapping(path="/getname")
  public String getName(@RequestParam String email){
    var userName = userRepository.findByEmail(email);
    return userName.iterator().next().getName();
  } 
	@PostMapping(path="/hello")
  @CrossOrigin(origins = "http://localhost:8080")
	public String hello(@RequestParam(name="name",defaultValue="Unknown")String Name,
						@RequestParam(name="apellido",defaultValue = "None") String Surname,
						@RequestParam(name="mail",defaultValue = "None") String Mail,
						@RequestParam(name="password",defaultValue = "123456") String Password
						){

	return String.format("Hello "+Name+" "+Surname);
		
	}
  @Configuration
	public class CorsConfig {

    @Bean
    public CorsFilter corsFilter() {

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        config.addAllowedOrigin("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("OPTIONS");
        config.addAllowedMethod("HEAD");
        config.addAllowedMethod("GET");
        config.addAllowedMethod("PUT");
        config.addAllowedMethod("POST");
        config.addAllowedMethod("DELETE");
        config.addAllowedMethod("PATCH");
        source.registerCorsConfiguration("/**", config);
        return new CorsFilter(source);
    }

	public CorsConfig() {
	}
}
}
	